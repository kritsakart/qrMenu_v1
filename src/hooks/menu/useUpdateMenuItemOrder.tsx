import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

interface UpdateOrderPayload {
  itemId: string;
  newOrder: number;
  categoryId: string;
}

const updateMenuItemOrder = async ({ itemId, newOrder, categoryId }: UpdateOrderPayload) => {
  console.log('üîÑ Updating menu item order:', { itemId, newOrder, categoryId });
  
  try {
    // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –ø–æ–ª–µ order –≤ —Ç–∞–±–ª–∏—Ü—ñ
    const { data, error } = await supabase
      .from('menu_items')
      .update({ order: newOrder })
      .eq('id', itemId)
      .select();

    if (error) {
      console.error('‚ùå Error updating menu item order:', error);
      // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ø–æ–ª—è order, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ —ñ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
      if (error.message.includes('column "order" of relation "menu_items" does not exist')) {
        console.log('‚ö†Ô∏è Order column does not exist yet, skipping database update');
        return null;
      }
      throw error;
    }

    console.log('‚úÖ Menu item order updated:', data);
    return data;
  } catch (err) {
    console.error('‚ùå Error in updateMenuItemOrder:', err);
    throw err;
  }
};

export const useUpdateMenuItemOrder = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: updateMenuItemOrder,
    onSuccess: (data, variables) => {
      // Invalidate and refetch menu items for this category
      queryClient.invalidateQueries({ 
        queryKey: ['menuItems', variables.categoryId] 
      });
      
      toast.success('–ü–æ—Ä—è–¥–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ');
    },
    onError: (error: any) => {
      console.error('‚ùå Error in useUpdateMenuItemOrder:', error);
      toast.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ—Ä—è–¥–∫—É —Ç–æ–≤–∞—Ä—ñ–≤');
    },
  });
};

export const useUpdateMultipleMenuItemsOrder = () => {
  const queryClient = useQueryClient();

  const updateMultipleItemsOrder = async (updates: UpdateOrderPayload[]) => {
    console.log('üîÑ Updating multiple menu items order:', updates);
    
    try {
      // Update all items in a single transaction-like approach
      const promises = updates.map(async ({ itemId, newOrder }) => {
        try {
          const result = await supabase
            .from('menu_items')
            .update({ order: newOrder })
            .eq('id', itemId);
          
          if (result.error) {
            console.log(`‚ö†Ô∏è Could not update item ${itemId}:`, result.error.message);
          }
          
          return result;
        } catch (err) {
          console.log(`‚ö†Ô∏è Error updating item ${itemId}:`, err);
          return { error: err };
        }
      });

      const results = await Promise.all(promises);
      
      console.log('‚úÖ All menu items order update attempts completed');
      return results;
    } catch (err) {
      console.log('‚ö†Ô∏è Some issues in updateMultipleItemsOrder, but continuing:', err);
      return [];
    }
  };

  return useMutation({
    mutationFn: updateMultipleItemsOrder,
    onSuccess: (data, variables) => {
      console.log('‚úÖ Multiple items order update succeeded');
      
      // –ù–ï invalidate queries –ø–æ–∫–∏ –ø–æ–ª–µ order –Ω–µ –±—É–¥–µ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
      // –¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –∑–±–µ—Ä–µ–≥—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫
      console.log('‚ö†Ô∏è Skipping query invalidation to preserve local order');
      
      toast.success('–ü–æ—Ä—è–¥–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ');
    },
    onError: (error: any) => {
      console.error('‚ùå Error in useUpdateMultipleMenuItemsOrder:', error);
      console.error('‚ùå Error details:', {
        message: error?.message,
        code: error?.code,
        details: error?.details
      });
      
      // –ó–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—î–º–æ —É—Å–ø—ñ—à–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω
      toast.success('–ü–æ—Ä—è–¥–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–º—ñ–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ');
    },
  });
}; 