
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { MenuItem, MenuCategory } from "@/types/models";
import { useMenuCategories } from "@/hooks/menu-categories";
import { useMenuItems } from "@/hooks/useMenuItems";
import { type MenuItemFormState } from "@/components/menu-builder/dialogs/MenuItemDialogs";

export const useMenuPageHandlers = (selectedCategoryId: string | null) => {
  const { toast } = useToast();
  const [selectedMenuItem, setSelectedMenuItem] = useState<MenuItem | null>(null);
  
  const { 
    categories, 
    isLoading: categoriesLoading, 
    error: categoriesError,
    addCategory,
    updateCategory,
    deleteCategory
  } = useMenuCategories();
  
  const { 
    menuItems, 
    isLoading: menuItemsLoading,
    error: menuItemsError,
    addMenuItem,
    updateMenuItem,
    deleteMenuItem,
    refreshMenuItems
  } = useMenuItems(selectedCategoryId || undefined);

  // Category handlers
  const handleAddCategory = async (name: string): Promise<MenuCategory | undefined> => {
    console.log("üîç DIAGNOSTIC: handleAddCategory –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º:", name);
    
    if (name.trim() === "") {
      console.log("‚ùå DIAGNOSTIC: –ü–æ—Ä–æ–∂–Ω—è –Ω–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó");
      toast({
        variant: "destructive",
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: "–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é",
      });
      return undefined;
    }
    
    try {
      console.log("üöÄ DIAGNOSTIC: handleAddCategory - –°–ø—Ä–æ–±–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", name);
      console.log("üîç DIAGNOSTIC: –°—Ç–∞–Ω addCategory —Ñ—É–Ω–∫—Ü—ñ—ó:", typeof addCategory);
      
      const category = await addCategory(name);
      
      if (category) {
        console.log("‚úÖ DIAGNOSTIC: handleAddCategory - –ö–∞—Ç–µ–≥–æ—Ä—ñ—é —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ:", category);
        return category;
      } else {
        console.log("‚ùå DIAGNOSTIC: handleAddCategory - –ù–µ –≤–¥–∞–ª–æ—Å—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é (–ø–æ–≤–µ—Ä–Ω—É–ª–æ—Å—å null/undefined)");
        toast({
          variant: "destructive",
          title: "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
          description: "–ù–µ –≤–¥–∞–ª–æ—Å—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é",
        });
        return undefined;
      }
    } catch (err) {
      console.error("‚ùå DIAGNOSTIC: handleAddCategory - –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", err);
      const errorMessage = err instanceof Error ? err.message : "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞";
      toast({
        variant: "destructive",
        title: "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
        description: errorMessage,
      });
      return undefined;
    }
  };
  
  const handleUpdateCategory = async (name: string): Promise<boolean | undefined> => {
    if (!selectedCategoryId) {
      console.log("‚ùå DIAGNOSTIC: handleUpdateCategory - selectedCategoryId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π");
      return undefined;
    }
    
    if (name.trim() === "") {
      toast({
        variant: "destructive",
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: "–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é",
      });
      return false;
    }
    
    try {
      console.log("–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", { id: selectedCategoryId, name });
      const success = await updateCategory(selectedCategoryId, name);
      if (success) {
        toast({
          title: "–ö–∞—Ç–µ–≥–æ—Ä—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ",
          description: `–ö–∞—Ç–µ–≥–æ—Ä—ñ—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞.`,
        });
      }
      return success;
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", err);
      toast({
        variant: "destructive",
        title: "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
        description: err instanceof Error ? err.message : "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞",
      });
      return false;
    }
  };
  
  const handleDeleteCategory = async (): Promise<boolean | undefined> => {
    if (!selectedCategoryId) {
      console.log("‚ùå DIAGNOSTIC: handleDeleteCategory - selectedCategoryId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π");
      return undefined;
    }
    
    try {
      console.log("–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", selectedCategoryId);
      const success = await deleteCategory(selectedCategoryId);
      if (success) {
        toast({
          title: "–ö–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ",
          description: `–ö–∞—Ç–µ–≥–æ—Ä—ñ—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞.`,
        });
      }
      return success;
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", err);
      toast({
        variant: "destructive",
        title: "–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
        description: err instanceof Error ? err.message : "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞",
      });
      return false;
    }
  };
  
  // MenuItem handlers
  const handleAddMenuItem = async (formData: MenuItemFormState): Promise<MenuItem | undefined> => {
    console.log("üéØ DIAGNOSTIC: handleAddMenuItem - selectedCategoryId:", selectedCategoryId);
    console.log("üéØ DIAGNOSTIC: handleAddMenuItem - formData:", formData);
    
    if (!selectedCategoryId || selectedCategoryId.trim() === '') {
      console.error("‚ùå DIAGNOSTIC: handleAddMenuItem - selectedCategoryId –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π:", selectedCategoryId);
      toast({
        variant: "destructive",
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—É–Ω–∫—Ç—É –º–µ–Ω—é",
      });
      return undefined;
    }
    
    if (formData.name.trim() === "") {
      toast({
        variant: "destructive",
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: "–ù–∞–∑–≤–∞ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é",
      });
      return undefined;
    }
    
    const price = parseFloat(formData.price);
    if (isNaN(price) || price <= 0) {
      toast({
        variant: "destructive",
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: "–¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º",
      });
      return undefined;
    }
    
    try {
      console.log("üöÄ DIAGNOSTIC: handleAddMenuItem - —Å–ø—Ä–æ–±–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—É–Ω–∫—Ç—É –º–µ–Ω—é:", {
        categoryId: selectedCategoryId,
        name: formData.name,
        price: price,
        description: formData.description.trim() || undefined,
        weight: formData.weight.trim() || undefined,
        imageUrl: formData.imageUrl.trim() || undefined,
      });
      
      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑ —Ñ–æ—Ä–º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
      const variants = formData.variants ? formData.variants.map(v => ({
        id: v.id,
        name: v.name,
        price: parseFloat(v.price) || 0,
        isDefault: v.isDefault
      })) : undefined;

      const menuItem = await addMenuItem(selectedCategoryId, {
        name: formData.name,
        description: formData.description.trim() || undefined,
        price: price,
        weight: formData.weight.trim() || undefined,
        imageUrl: formData.imageUrl.trim() || undefined,
        variants: variants,
      });
      
      if (menuItem) {
        console.log("‚úÖ DIAGNOSTIC: handleAddMenuItem - –ø—É–Ω–∫—Ç –º–µ–Ω—é —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ:", menuItem);
        return menuItem;
      } else {
        console.log("‚ùå DIAGNOSTIC: handleAddMenuItem - –Ω–µ –≤–¥–∞–ª–æ—Å—å –¥–æ–¥–∞—Ç–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é");
        return undefined;
      }
    } catch (err) {
      console.error("‚ùå DIAGNOSTIC: handleAddMenuItem - –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é:", err);
      toast({
        variant: "destructive",
        title: "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—É–Ω–∫—Ç—É –º–µ–Ω—é",
        description: err instanceof Error ? err.message : "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞",
      });
      return undefined;
    }
  };
  
  const handleUpdateMenuItem = async (formData: MenuItemFormState): Promise<boolean | undefined> => {
    if (!selectedMenuItem) return undefined;
    
    if (formData.name.trim() === "") {
      toast({
        variant: "destructive",
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: "–ù–∞–∑–≤–∞ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é",
      });
      return undefined;
    }
    
    const price = parseFloat(formData.price);
    if (isNaN(price) || price <= 0) {
      toast({
        variant: "destructive",
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: "–¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º",
      });
      return undefined;
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑ —Ñ–æ—Ä–º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
    const variants = formData.variants ? formData.variants.map(v => ({
      id: v.id,
      name: v.name,
      price: parseFloat(v.price) || 0,
      isDefault: v.isDefault
    })) : undefined;

    const success = await updateMenuItem(selectedMenuItem.id, {
      name: formData.name,
      description: formData.description.trim() || undefined,
      price: price,
      weight: formData.weight.trim() || undefined,
      imageUrl: formData.imageUrl.trim() || undefined,
      variants: variants,
    });
    
    return success;
  };
  
  const handleDeleteMenuItem = async (): Promise<boolean | undefined> => {
    if (!selectedMenuItem) return undefined;
    
    const success = await deleteMenuItem(selectedMenuItem.id);
    return success;
  };

  return {
    categories,
    menuItems,
    selectedMenuItem,
    setSelectedMenuItem,
    
    categoriesLoading,
    menuItemsLoading,
    
    categoriesError,
    menuItemsError,
    
    refreshMenuItems,
    
    handleAddCategory,
    handleUpdateCategory,
    handleDeleteCategory,
    
    handleAddMenuItem,
    handleUpdateMenuItem,
    handleDeleteMenuItem,
  };
};
