import { useState, useEffect } from "react";
import { AppUser } from "@/types/auth";
import { getStoredUser, setStoredUser, clearStoredUser } from "./useStoredUser";
import { supabase } from "@/integrations/supabase/client";

/**
 * Hook for managing authentication state
 */
export const useAuthState = () => {
  console.log("üéØ useAuthState: Hook called!", new Date().toISOString());
  
  const [user, setUser] = useState<AppUser | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // Helper function to check if user is a mock/local user
  const isMockUser = (user: AppUser | null): boolean => {
    if (!user) return false;
    
    console.log("üîç isMockUser check:", {
      id: user.id,
      email: user.email,
      username: user.username,
      idStartsWithAdmin: user.id.startsWith('admin-'),
      idStartsWithCafe: user.id.startsWith('cafe-'),
      emailIncludesMock: user.email?.includes('@mock.com'),
      usernameIncludesMock: user.username?.includes('mock')
    });
    
    const isSpecialPrefix = user.id.startsWith('admin-') || user.id.startsWith('cafe-');
    const isMockEmail = user.email?.includes('@mock.com');
    const isMockUsername = user.username?.includes('mock');
    
    const result = isSpecialPrefix || isMockEmail || isMockUsername;
    
    console.log("üîç isMockUser result:", result, "for user:", user.id);
    
    return result;
  };

  // Initialize auth state from storage on component mount
  useEffect(() => {
    console.log("üöÄ Initializing auth state...");
    
    const storedUser = getStoredUser();
    if (storedUser) {
      console.log("üì± Found stored user:", storedUser);
      
      // If it's a mock user, set it immediately and don't wait for Supabase
      if (isMockUser(storedUser)) {
        console.log("‚úÖ Mock user detected, setting immediately");
        setUser(storedUser);
        setIsLoading(false);
      } else {
        console.log("üîç Real user detected, waiting for Supabase session");
        setUser(storedUser); // Set user but keep loading true
      }
    } else {
      console.log("‚ùå No stored user found");
    }

    // –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á–∞ –∑–º—ñ–Ω —Å—Ç–∞–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó Supabase
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log("‚ú® Supabase auth state changed:", event, session?.user?.id || 'no session');
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ localStorage
        const currentStoredUser = getStoredUser();
        
        // –ö–†–ò–¢–ò–ß–ù–û: –Ø–∫—â–æ —î –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π mock –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, –ù–Ü–ö–û–õ–ò –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ –π–æ–≥–æ
        if (currentStoredUser && isMockUser(currentStoredUser)) {
          console.log("üîí PRESERVING mock user, ignoring Supabase session:", currentStoredUser.id);
          setUser(currentStoredUser);
          setIsLoading(false);
          return; // –í–ê–ñ–õ–ò–í–û: –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è —Ä–∞–Ω—ñ—à–µ, –Ω–µ –æ–±—Ä–æ–±–ª—è—î–º–æ Supabase —Å–µ—Å—ñ—é
        }
        
        if (session) {
          console.log("üîë Processing Supabase session for user:", session.user.id);
          
          // –Ø–∫—â–æ —î —Å–µ—Å—ñ—è, –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–±–ª–∏—Ü—ñ cafe_owners
          const { data: profileData, error: profileError } = await supabase
            .from('cafe_owners')
            .select('id')
            .eq('id', session.user.id)
            .single();

          if (profileError && profileError.code !== 'PGRST116') {
            console.error("‚ùå Error fetching user profile from cafe_owners:", profileError);
            // –ù–µ –æ—á–∏—â–∞—î–º–æ localStorage –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –º–æ–∂–ª–∏–≤–æ —Ü–µ mock user
            if (currentStoredUser && currentStoredUser.id !== session.user.id) {
              console.log("üîÑ Different user session detected, updating...");
              clearStoredUser();
              setUser(null);
            }
            setIsLoading(false);
            return;
          }

          if (profileData) {
            // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤–ª–∞—Å–Ω–∏–∫–æ–º –∫–∞—Ñ–µ
            const appUser: AppUser = {
              id: session.user.id,
              email: session.user.email || '',
              username: session.user.email || session.user.id,
              role: 'cafe_owner',
              cafeId: profileData.id,
            };
            console.log("‚úÖ Setting cafe owner user:", appUser.id);
            setStoredUser(appUser);
            setUser(appUser);
            setIsLoading(false);
          } else {
            // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –≤–ª–∞—Å–Ω–∏–∫–æ–º –∫–∞—Ñ–µ
            const defaultUser: AppUser = {
              id: session.user.id,
              email: session.user.email || '',
              username: session.user.email || session.user.id,
              role: 'public',
              cafeId: undefined,
            };
            console.log("‚úÖ Setting public user:", defaultUser.id);
            setStoredUser(defaultUser);
            setUser(defaultUser);
            setIsLoading(false);
          }
        } else {
          console.log("‚ùå No Supabase session");
          
          // –°–µ—Å—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
          if (currentStoredUser) {
            console.log("üîç No session but found stored user:", currentStoredUser.id);
            
            // –Ø–∫—â–æ —Ü–µ mock user, –û–ë–û–í'–Ø–ó–ö–û–í–û –∑–∞–ª–∏—à–∞—î–º–æ –π–æ–≥–æ
            if (isMockUser(currentStoredUser)) {
              console.log("üîí PRESERVING mock user after session loss:", currentStoredUser.id);
              setUser(currentStoredUser);
              setIsLoading(false);
              return;
            }
            
            // –Ø–∫—â–æ —Ü–µ –±—É–≤ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π Supabase –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, –æ—á–∏—â–∞—î–º–æ –π–æ–≥–æ
            console.log("üî¥ Real user session lost, clearing user");
            clearStoredUser();
            setUser(null);
          } else {
            console.log("‚ùå No session and no stored user");
            setUser(null);
          }
          setIsLoading(false);
        }
      }
    );

    // –î–ª—è –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ isLoading –≤ false —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π —á–∞—Å
    if (!storedUser) {
      const timeout = setTimeout(() => {
        setIsLoading(false);
      }, 1000); // –î–∞—î–º–æ Supabase 1 —Å–µ–∫—É–Ω–¥—É –Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
      
      return () => {
        clearTimeout(timeout);
        subscription.unsubscribe();
      };
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ —Ä–æ–∑–º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      subscription.unsubscribe();
    };
  }, []); // –ü—É—Å—Ç–∏–π –º–∞—Å–∏–≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π, —â–æ–± –µ—Ñ–µ–∫—Ç –∑–∞–ø—É—Å–∫–∞–≤—Å—è –ª–∏—à–µ —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ

  return {
    user,
    setUser,
    isLoading,
    setIsLoading,
    isAuthenticated: !!user,
    isSuperAdmin: user?.role === "super_admin"
  };
};
