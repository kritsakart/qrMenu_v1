import { useState, useEffect } from "react";
import { AppUser } from "@/types/auth";
import { getStoredUser, setStoredUser, clearStoredUser } from "./useStoredUser";
import { supabase } from "@/integrations/supabase/client";

/**
 * Hook for managing authentication state
 */
export const useAuthState = () => {
  const [user, setUser] = useState<AppUser | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // Initialize auth state from storage on component mount
  useEffect(() => {
    const storedUser = getStoredUser();
    if (storedUser) {
      setUser(storedUser);
    }
    setIsLoading(false);

    // –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á–∞ –∑–º—ñ–Ω —Å—Ç–∞–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó Supabase
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log("‚ú® Supabase auth state changed in useAuthState:", event, session);
        if (session) {
          // –Ø–∫—â–æ —î —Å–µ—Å—ñ—è, –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–±–ª–∏—Ü—ñ cafe_owners
          const { data: profileData, error: profileError } = await supabase
            .from('cafe_owners') // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é cafe_owners
            .select('id') // –û—Ç—Ä–∏–º—É—î–º–æ —Ç—ñ–ª—å–∫–∏ id
            .eq('id', session.user.id)
            .single();

          if (profileError && profileError.code !== 'PGRST116') { // PGRST116 –æ–∑–Ω–∞—á–∞—î "Row not found"
            console.error("‚ùå Error fetching user profile from cafe_owners:", profileError);
            clearStoredUser();
            setUser(null);
            setIsLoading(false);
            return;
          }

          if (profileData) {
            // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤–ª–∞—Å–Ω–∏–∫–æ–º –∫–∞—Ñ–µ
            const appUser: AppUser = {
              id: session.user.id,
              email: session.user.email || '',
              username: session.user.email || session.user.id,
              role: 'cafe_owner',
              cafeId: profileData.id,
            };
            setStoredUser(appUser);
            setUser(appUser);
            setIsLoading(false);
          } else {
            // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –≤–ª–∞—Å–Ω–∏–∫–æ–º –∫–∞—Ñ–µ (–∞–±–æ —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω, –∞–±–æ –ø—Ä–æ—Å—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–µ–∑ –∫–∞—Ñ–µ)
            const defaultUser: AppUser = {
              id: session.user.id,
              email: session.user.email || '',
              username: session.user.email || session.user.id,
              role: 'public', // –†–æ–ª—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
              cafeId: undefined,
            };
            setStoredUser(defaultUser);
            setUser(defaultUser);
            setIsLoading(false);
          }
        } else {
          // –°–µ—Å—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è, –æ—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
          console.log("üî¥ Supabase session cleared in useAuthState. Clearing user.");
          clearStoredUser();
          setUser(null);
          setIsLoading(false);
        }
      }
    );

    // –û—á–∏—Å—Ç–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ —Ä–æ–∑–º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      subscription.unsubscribe();
    };
  }, []); // –ü—É—Å—Ç–∏–π –º–∞—Å–∏–≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π, —â–æ–± –µ—Ñ–µ–∫—Ç –∑–∞–ø—É—Å–∫–∞–≤—Å—è –ª–∏—à–µ —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ

  return {
    user,
    setUser,
    isLoading,
    setIsLoading,
    isAuthenticated: !!user,
    isSuperAdmin: user?.role === "super_admin"
  };
};
