import { useState, useEffect } from "react";
import { useAuth } from "@/contexts/AuthContext";
import DashboardLayout from "@/components/layouts/DashboardLayout";
import { Button } from "@/components/ui/button";
import { supabase } from "@/integrations/supabase/client";

const MenuPage = () => {
  const { user } = useAuth();
  const cafeId = user?.cafeId || "";
  
  console.log("üöÄ MenuPage STARTED! User:", user);
  console.log("üîç CafeId:", cafeId);
  
  const [newCategoryName, setNewCategoryName] = useState("");
  const [categories, setCategories] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
  const loadCategories = async () => {
    if (!cafeId) {
      console.log("‚ùå No cafeId provided, stopping");
      setIsLoading(false);
      return;
    }

    try {
      setIsLoading(true);
      setError(null);
      
      console.log("üîç === –ü–û–ß–ê–¢–û–ö –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ö–ê–¢–ï–ì–û–†–Ü–ô ===");
      console.log("üîç Loading categories for cafeId:", cafeId);
      console.log("üîç User object:", user);
      console.log("üîç Using supabase client (same as QR menu)");

      // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —á–∏ –≤–∑–∞–≥–∞–ª—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î
      console.log("üß™ Testing basic supabase connection...");
      const testResult = await supabase.from('cafe_owners').select('count', { count: 'exact', head: true });
      console.log("üß™ Test connection result:", testResult);

      // –¢–µ–ø–µ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ—á–Ω–æ —Ç–∞–∫ —Å–∞–º–æ —è–∫ QR –º–µ–Ω—é
      console.log("üîç Executing query: supabase.from('menu_categories').select('*').eq('cafe_id', '" + cafeId + "').order('order')");
      
      const { data, error } = await supabase
        .from('menu_categories')
        .select('*')
        .eq('cafe_id', cafeId)
        .order('order');

      console.log("üîç === –†–ï–ó–£–õ–¨–¢–ê–¢ –ó–ê–ü–ò–¢–£ –ö–ê–¢–ï–ì–û–†–Ü–ô ===");
      console.log("üîç Categories response data:", data);
      console.log("üîç Categories response error:", error);
      console.log("üîç Data type:", typeof data);
      console.log("üîç Data length:", data?.length);
      
      if (data) {
        console.log("üîç First category (if exists):", data[0]);
        data.forEach((cat, index) => {
          console.log(`üîç Category ${index + 1}: ID=${cat.id}, name=${cat.name}, cafe_id=${cat.cafe_id}`);
        });
      }

      if (error) {
        console.error("‚ùå Error loading categories:", error);
        console.error("‚ùå Error details:", {
          message: error.message,
          details: error.details,
          hint: error.hint,
          code: error.code
        });
        setError(error.message);
        return;
      }

      console.log("‚úÖ Found categories:", data?.length || 0);
      setCategories(data || []);
      console.log("üîç === –ö–Ü–ù–ï–¶–¨ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ö–ê–¢–ï–ì–û–†–Ü–ô ===");

    } catch (err) {
      const errorMsg = err instanceof Error ? err.message : 'Unknown error';
      console.error("‚ùå Catch block error:", err);
      console.error("‚ùå Error loading categories:", errorMsg);
      setError(errorMsg);
    } finally {
      setIsLoading(false);
    }
  };
  
  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
  const handleAddCategory = async () => {
    if (!newCategoryName.trim() || !cafeId) return;
    
    try {
      console.log("üöÄ Adding category:", newCategoryName);
      
      const { data, error } = await supabase
        .from("menu_categories")
        .insert({
          cafe_id: cafeId,
          name: newCategoryName.trim(),
          description: null,
          order: categories.length + 1
        })
        .select()
        .single();
      
      if (error) {
        console.error("‚ùå Error adding category:", error);
        alert(`–ü–æ–º–∏–ª–∫–∞: ${error.message}`);
        return;
      }
      
      console.log("‚úÖ Category added:", data);
      setNewCategoryName("");
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫
      loadCategories();
      
    } catch (err) {
      console.error("‚ùå Error adding category:", err);
      alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó");
    }
  };
  
  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–∏ –∑–º—ñ–Ω—ñ cafeId
  useEffect(() => {
    loadCategories();
  }, [cafeId]);
  
  console.log("üìä Categories state:", { categories, isLoading, error });
  
  // Check if user is authenticated
  if (!user) {
    return (
      <DashboardLayout title="–ú–µ–Ω—é">
        <div className="flex justify-center items-center h-64">
          <p className="text-muted-foreground">–ë—É–¥—å –ª–∞—Å–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å</p>
        </div>
      </DashboardLayout>
    );
  }

  if (!user.cafeId) {
    return (
      <DashboardLayout title="–ú–µ–Ω—é">
        <div className="flex justify-center items-center h-64">
          <p className="text-muted-foreground">–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –∫–∞—Ñ–µ</p>
        </div>
      </DashboardLayout>
    );
  }
  
  return (
    <DashboardLayout title="–ú–µ–Ω—é">
      <div className="mb-6">
        <div className="bg-blue-100 p-4 rounded-lg mb-4">
          <h2 className="text-lg font-bold text-blue-800">üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê</h2>
          <p><strong>–ö–∞—Ñ–µ ID:</strong> {user.cafeId}</p>
          <p><strong>–ö–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–Ω–∞–π–¥–µ–Ω–æ:</strong> {categories.length}</p>
          <p><strong>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:</strong> {isLoading ? '–¢–∞–∫' : '–ù—ñ'}</p>
          <p><strong>–ü–æ–º–∏–ª–∫–∞:</strong> {error || '–ù–µ–º–∞—î'}</p>
          <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {categories.length > 0 ? '‚úÖ –ó–Ω–∞–π–¥–µ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó' : '‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ'}</p>
        </div>
        
        <p className="text-muted-foreground mb-4">
          –°—Ç–≤–æ—Ä—é–π—Ç–µ —Ç–∞ —Ä–µ–¥–∞–≥—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –ø—É–Ω–∫—Ç–∏ –≤–∞—à–æ–≥–æ –º–µ–Ω—é.
        </p>
        
        {/* –§–æ—Ä–º–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó */}
        <div className="bg-white p-4 border rounded-lg mb-4">
          <h3 className="font-semibold mb-3">–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é</h3>
          <div className="flex gap-2">
            <input
              type="text"
              value={newCategoryName}
              onChange={(e) => setNewCategoryName(e.target.value)}
              placeholder="–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
              className="flex-1 px-3 py-2 border rounded-md"
              onKeyPress={(e) => e.key === 'Enter' && handleAddCategory()}
            />
            <Button 
              onClick={handleAddCategory}
              disabled={!newCategoryName.trim() || isLoading}
              className="bg-blue-600 text-white"
            >
              –î–æ–¥–∞—Ç–∏
            </Button>
          </div>
        </div>
        
        {/* –ü–æ–∫–∞–∑–∞—Ç–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó */}
        {!isLoading && categories.length > 0 && (
          <div className="mt-4 p-4 border rounded-lg bg-green-50">
            <h3 className="font-semibold text-green-800 mb-2">‚úÖ –ó–Ω–∞–π–¥–µ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:</h3>
            <ul className="space-y-2">
              {categories.map((cat, index) => (
                <li key={cat.id} className="p-2 bg-white rounded border">
                  <div className="flex justify-between items-center">
                    <span className="font-medium">{index + 1}. {cat.name}</span>
                    <span className="text-sm text-gray-500">ID: {cat.id}</span>
                  </div>
                </li>
              ))}
            </ul>
          </div>
        )}
        
        {!isLoading && categories.length === 0 && !error && (
          <div className="mt-4 p-4 border border-dashed border-gray-300 rounded-lg text-center">
            <p className="text-sm text-muted-foreground mb-3">
              –î–ª—è —Ü—å–æ–≥–æ –∫–∞—Ñ–µ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –º–µ–Ω—é
            </p>
          </div>
        )}
        
        {isLoading && (
          <div className="mt-4 p-4 border rounded-lg text-center">
            <p className="text-muted-foreground">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...</p>
          </div>
        )}
        
        {error && (
          <div className="mt-4 p-4 border rounded-lg bg-red-50 text-center">
            <p className="text-red-600">–ü–æ–º–∏–ª–∫–∞: {error}</p>
            <Button onClick={loadCategories} className="mt-2">
              –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
            </Button>
          </div>
        )}
      </div>
    </DashboardLayout>
  );
};

export default MenuPage;
